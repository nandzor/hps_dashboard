{
  "info": {
    "name": "CCTV Dashboard API",
    "description": "Complete API collection for CCTV Dashboard with Person Re-ID Detection, API Credential Management, and Rate Limiting. Auth endpoints (login, register, logout, me) use direct paths, other endpoints use /v1/ prefix.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "2.0.0",
    "_postman_id": "cctv-dashboard-api-v2"
  },
  "auth": {
    "type": "apikey",
    "apikey": [
      {
        "key": "value",
        "value": "{{api_key}}",
        "type": "string"
      },
      {
        "key": "key",
        "value": "X-API-Key",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "{{base_url}}",
      "type": "string",
      "description": "Base API URL (configured in environment)"
    },
    {
      "key": "api_key",
      "value": "{{api_key}}",
      "type": "string",
      "description": "API Key from /api-credentials (admin only)"
    },
    {
      "key": "api_secret",
      "value": "{{api_secret}}",
      "type": "string",
      "description": "API Secret (shown once during creation)"
    },
    {
      "key": "sanctum_token",
      "value": "",
      "type": "string",
      "description": "Sanctum Bearer token (get from login)"
    },
    {
      "key": "test_re_id",
      "value": "REID_20251008_0001",
      "type": "string",
      "description": "Test Re-ID for person tracking"
    },
    {
      "key": "test_branch_id",
      "value": "1",
      "type": "string",
      "description": "Test branch ID"
    },
    {
      "key": "test_device_id",
      "value": "CAMERA_001",
      "type": "string",
      "description": "Test device ID"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@cctv.com\",\n  \"password\": \"admin123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "description": "Login with admin credentials to get Sanctum token",
            "url": {
              "raw": "{{base_url}}/login",
              "host": ["{{base_url}}"],
              "path": ["login"]
            }
          }
        },
        {
          "name": "Register",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test User\",\n  \"email\": \"test@example.com\",\n  \"password\": \"password\",\n  \"password_confirmation\": \"password\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/register",
              "host": ["{{base_url}}"],
              "path": ["register"]
            }
          }
        }
      ]
    },
    {
      "name": "Detection API",
      "item": [
        {
          "name": "Log Detection",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{api_key}}",
                "type": "text",
                "description": "API Key from /api-credentials"
              },
              {
                "key": "X-API-Secret",
                "value": "{{api_secret}}",
                "type": "text",
                "description": "API Secret (saved during creation)"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"re_id\": \"{{test_re_id}}\",\n  \"branch_id\": {{test_branch_id}},\n  \"device_id\": \"{{test_device_id}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/v1/detection/log",
              "host": ["{{base_url}}"],
              "path": ["v1", "detection", "log"]
            },
            "description": "Log a new person detection event (async processing with 202 Accepted response)\n\n**Required Fields (Minimal):**\n- re_id (string, max 100)\n- branch_id (integer, must exist)\n- device_id (string, must exist)\n\n**Optional Fields:**\n- detection_data (object) → Optional detection metadata\n  - confidence (float, 0-1)\n  - bounding_box (object)\n  - appearance_features (object)\n- person_features (object) → Optional person attributes\n  - gender (string: male/female/unknown)\n  - age_range (string)\n  - clothing (object)\n- image (file) → Optional detection image\n\n**Backend Defaults:**\n- detected_count: Always set to 1 by backend\n\n**Minimal Example:**\n```json\n{\n  \"re_id\": \"REID_20251008_0001\",\n  \"branch_id\": 1,\n  \"device_id\": \"CAMERA_001\"\n}\n```\n\nRate Limit: 10,000 requests/hour per credential\nGlobal Access: All branches & devices\n\nResponse Headers:\n- X-RateLimit-Limit: 10000\n- X-RateLimit-Remaining: 9847\n- X-RateLimit-Reset: 1728399600"
          },
          "response": [
            {
              "name": "Success - 202 Accepted",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"re_id\": \"REID_20251008_0001\",\n  \"branch_id\": 1,\n  \"device_id\": \"CAMERA_001\",\n  \"detected_count\": 1\n}"
                },
                "url": {
                  "raw": "{{base_url}}/detection/log",
                  "host": ["{{base_url}}"],
                  "path": ["detection", "log"]
                }
              },
              "status": "Accepted",
              "code": 202,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "X-RateLimit-Limit",
                  "value": "10000"
                },
                {
                  "key": "X-RateLimit-Remaining",
                  "value": "9847"
                }
              ],
              "body": "{\n  \"success\": true,\n  \"message\": \"Detection submitted successfully\",\n  \"data\": {\n    \"re_id\": \"REID_20251008_0001\",\n    \"branch_id\": 1,\n    \"device_id\": \"CAMERA_001\",\n    \"status\": \"processing\",\n    \"job_id\": \"uuid-here\"\n  }\n}"
            }
          ]
        },
        {
          "name": "Check Detection Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{api_key}}",
                "type": "text"
              },
              {
                "key": "X-API-Secret",
                "value": "{{api_secret}}",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/detection/status/:jobId",
              "host": ["{{base_url}}"],
              "path": ["v1", "detection", "status", ":jobId"],
              "variable": [
                {
                  "key": "jobId",
                  "value": "job_uuid_here",
                  "description": "Job ID from detection/log response"
                }
              ]
            },
            "description": "Check the processing status of a detection job"
          }
        },
        {
          "name": "List Detections",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{api_key}}",
                "type": "text"
              },
              {
                "key": "X-API-Secret",
                "value": "{{api_secret}}",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/detections?per_page=20",
              "host": ["{{base_url}}"],
              "path": ["v1", "detections"],
              "query": [
                {
                  "key": "date_from",
                  "value": "2025-10-01",
                  "disabled": true
                },
                {
                  "key": "date_to",
                  "value": "2025-10-07",
                  "disabled": true
                },
                {
                  "key": "branch_id",
                  "value": "1",
                  "disabled": true
                },
                {
                  "key": "device_id",
                  "value": "CAM_JKT001_001",
                  "disabled": true
                },
                {
                  "key": "re_id",
                  "value": "person_test_001",
                  "disabled": true
                },
                {
                  "key": "per_page",
                  "value": "20",
                  "disabled": false
                }
              ]
            },
            "description": "Get all detections with optional filters"
          }
        },
        {
          "name": "Get Detection Summary",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{api_key}}",
                "type": "text"
              },
              {
                "key": "X-API-Secret",
                "value": "{{api_secret}}",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/detection/summary",
              "host": ["{{base_url}}"],
              "path": ["v1", "detection", "summary"],
              "query": [
                {
                  "key": "date",
                  "value": "2025-10-07",
                  "disabled": true
                }
              ]
            },
            "description": "Get global detection summary with statistics and trends"
          }
        },
        {
          "name": "Get Person Info",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{api_key}}",
                "type": "text"
              },
              {
                "key": "X-API-Secret",
                "value": "{{api_secret}}",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/person/:reId",
              "host": ["{{base_url}}"],
              "path": ["v1", "person", ":reId"],
              "query": [
                {
                  "key": "date",
                  "value": "2025-10-07",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "reId",
                  "value": "{{test_re_id}}"
                }
              ]
            },
            "description": "Get person information by Re-ID"
          }
        },
        {
          "name": "Get Person Detection History",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{api_key}}",
                "type": "text"
              },
              {
                "key": "X-API-Secret",
                "value": "{{api_secret}}",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/person/:reId/detections",
              "host": ["{{base_url}}"],
              "path": ["v1", "person", ":reId", "detections"],
              "query": [
                {
                  "key": "date_from",
                  "value": "2025-10-01",
                  "disabled": true
                },
                {
                  "key": "date_to",
                  "value": "2025-10-07",
                  "disabled": true
                },
                {
                  "key": "branch_id",
                  "value": "1",
                  "disabled": true
                },
                {
                  "key": "per_page",
                  "value": "20",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "reId",
                  "value": "{{test_re_id}}"
                }
              ]
            }
          }
        },
        {
          "name": "Get Branch Detections",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-API-Key",
                "value": "{{api_key}}",
                "type": "text"
              },
              {
                "key": "X-API-Secret",
                "value": "{{api_secret}}",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/branch/:branchId/detections",
              "host": ["{{base_url}}"],
              "path": ["v1", "branch", ":branchId", "detections"],
              "query": [
                {
                  "key": "date",
                  "value": "2025-10-07",
                  "disabled": true
                },
                {
                  "key": "device_id",
                  "value": "CAM_JKT001_001",
                  "disabled": true
                },
                {
                  "key": "per_page",
                  "value": "20",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "branchId",
                  "value": "{{test_branch_id}}"
                }
              ]
            },
            "description": "Get detections for specific branch with statistics"
          }
        }
      ]
    },
    {
      "name": "User API",
      "item": [
        {
          "name": "List Users",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{sanctum_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/v1/users",
              "host": ["{{base_url}}"],
              "path": ["v1", "users"]
            }
          }
        },
        {
          "name": "Get Current User",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{sanctum_token}}",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/me",
              "host": ["{{base_url}}"],
              "path": ["me"]
            },
            "description": "Get authenticated user information"
          }
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{sanctum_token}}",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/logout",
              "host": ["{{base_url}}"],
              "path": ["logout"]
            },
            "description": "Logout and invalidate Sanctum token"
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Pre-request script for all requests",
          "console.log('Environment: ' + pm.environment.name);",
          "console.log('Base URL: ' + pm.variables.get('base_url'));"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Test script for all requests",
          "pm.test('Status code is successful', function () {",
          "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
          "});",
          "",
          "// Check rate limit headers (for API Key auth)",
          "if (pm.request.headers.get('X-API-Key')) {",
          "    pm.test('Rate limit headers present', function () {",
          "        pm.expect(pm.response.headers.get('X-RateLimit-Limit')).to.exist;",
          "        pm.expect(pm.response.headers.get('X-RateLimit-Remaining')).to.exist;",
          "    });",
          "    ",
          "    // Log rate limit info",
          "    const remaining = pm.response.headers.get('X-RateLimit-Remaining');",
          "    console.log('Rate Limit Remaining: ' + remaining + '/10000');",
          "}",
          "",
          "// Parse response if JSON",
          "if (pm.response.headers.get('Content-Type').includes('application/json')) {",
          "    const jsonData = pm.response.json();",
          "    pm.test('Response has success field', function () {",
          "        pm.expect(jsonData).to.have.property('success');",
          "    });",
          "}"
        ]
      }
    }
  ]
}
